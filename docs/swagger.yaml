basePath: /api/v1
consumes:
- application/json
definitions:
  dto.CreateScheduleRequest:
    properties:
      available_seats:
        minimum: 0
        type: integer
      movie_title:
        maxLength: 255
        minLength: 1
        type: string
      price:
        minimum: 0
        type: number
      show_date:
        type: string
      show_time:
        type: string
      studio_name:
        maxLength: 100
        minLength: 1
        type: string
    required:
    - available_seats
    - movie_title
    - price
    - show_date
    - show_time
    - studio_name
    type: object
  dto.ErrorValidationDto:
    properties:
      field:
        type: string
      message:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.RegisterResponse:
    properties:
      access_token:
        type: string
      user_id:
        type: integer
    type: object
  dto.ResponseDto:
    properties:
      data: {}
      errors:
        items:
          $ref: '#/definitions/dto.ErrorValidationDto'
        type: array
      message:
        type: string
    type: object
  dto.ScheduleDto:
    properties:
      available_seats:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      movie_title:
        type: string
      price:
        type: number
      show_date:
        type: string
      show_time:
        type: string
      studio_name:
        type: string
      updated_at:
        type: string
    type: object
  dto.UpdateScheduleRequest:
    properties:
      available_seats:
        minimum: 0
        type: integer
      movie_title:
        maxLength: 255
        minLength: 1
        type: string
      price:
        minimum: 0
        type: number
      show_date:
        type: string
      show_time:
        type: string
      studio_name:
        maxLength: 100
        minLength: 1
        type: string
    type: object
  dto.UserDto:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
  description: Go Fiber Template API Documentation
  title: Go Fiber Template API Documentation
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: User login with email and password
      parameters:
      - description: User login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.ResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseDto'
      summary: User login
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.ResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/dto.RegisterResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseDto'
      summary: Register a new user
      tags:
      - Auth
  /ping:
    get:
      consumes:
      - application/json
      description: Ping the server
      produces:
      - application/json
      responses:
        "200":
          description: pong
          schema:
            type: string
      summary: Ping
      tags:
      - App
  /schedules:
    get:
      consumes:
      - application/json
      description: Get all movie schedules
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.ResponseDto'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ScheduleDto'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseDto'
      summary: Get all schedules
      tags:
      - Schedule
    post:
      consumes:
      - application/json
      description: Create a new movie schedule
      parameters:
      - description: Schedule creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateScheduleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.ResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/dto.ScheduleDto'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseDto'
      security:
      - Bearer: []
      summary: Create a new schedule
      tags:
      - Schedule
  /schedules/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a movie schedule by ID
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseDto'
      security:
      - Bearer: []
      summary: Delete schedule
      tags:
      - Schedule
    get:
      consumes:
      - application/json
      description: Get a movie schedule by ID
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.ResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/dto.ScheduleDto'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseDto'
      summary: Get schedule by ID
      tags:
      - Schedule
    put:
      consumes:
      - application/json
      description: Update a movie schedule by ID
      parameters:
      - description: Schedule ID
        in: path
        name: id
        required: true
        type: integer
      - description: Schedule update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateScheduleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.ResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/dto.ScheduleDto'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseDto'
      security:
      - Bearer: []
      summary: Update schedule
      tags:
      - Schedule
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Find user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.ResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserDto'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseDto'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseDto'
      security:
      - Bearer: []
      summary: Find user by ID
      tags:
      - User
produces:
- application/json
schemes:
- http
- https
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
