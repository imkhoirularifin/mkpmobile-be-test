---
description: 
globs: 
alwaysApply: false
---
# Fiber Framework Patterns & Best Practices

## Core Fiber Concepts
Based on the [Fiber documentation](mdc:https:/docs.gofiber.io), this project follows these key principles:

### Zero Allocation Optimization
- Values from `*fiber.Ctx` are NOT immutable by default
- Only use context values within handlers
- Use `utils.CopyString()` for persisting strings:
```go
import "github.com/gofiber/fiber/v2/utils"

func handler(c *fiber.Ctx) error {
    // Make immutable copy
    result := utils.CopyString(c.Params("foo"))
    return c.SendString(result)
}
```

### Basic Routing Patterns
```go
// Simple route
app.Get("/", func(c *fiber.Ctx) error {
    return c.SendString("Hello, World!")
})

// Parameters
app.Get("/:value", func(c *fiber.Ctx) error {
    return c.SendString("value: " + c.Params("value"))
})

// Optional parameters
app.Get("/:name?", func(c *fiber.Ctx) error {
    if c.Params("name") != "" {
        return c.SendString("Hello " + c.Params("name"))
    }
    return c.SendString("Where is john?")
})

// Wildcards
app.Get("/api/*", func(c *fiber.Ctx) error {
    return c.SendString("API path: " + c.Params("*"))
})
```

## Project-Specific Patterns

### Handler Structure
```go
// internal/app/http_handler.go
type httpHandler struct{}

func (h *httpHandler) ping(c *fiber.Ctx) error {
    return c.SendString("pong")
}

func (h *httpHandler) getUser(c *fiber.Ctx) error {
    id := c.Params("id")
    // Business logic here
    return c.JSON(fiber.Map{
        "id": id,
        "name": "John Doe",
    })
}
```

### Route Registration
```go
// internal/infrastructure/router.go
func SetupRoutes(app *fiber.App) {
    handler := &app.httpHandler{}
    
    api := app.Group("/api")
    api.Get("/ping", handler.ping)
    api.Get("/users/:id", handler.getUser)
}
```

### Error Handling
```go
// Consistent error responses
func (h *httpHandler) createUser(c *fiber.Ctx) error {
    var user User
    if err := c.BodyParser(&user); err != nil {
        return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
            "error": "Invalid request body",
            "code": "VALIDATION_ERROR",
        })
    }
    
    // Process user creation
    return c.Status(fiber.StatusCreated).JSON(user)
}
```

### Middleware Usage
```go
// Apply middleware to specific routes
app.Use("/api", middleware.Auth())
app.Use("/api", middleware.CORS())

// Custom middleware
func LoggingMiddleware() fiber.Handler {
    return func(c *fiber.Ctx) error {
        start := time.Now()
        err := c.Next()
        log.Printf("Request to %s took %v", c.Path(), time.Since(start))
        return err
    }
}
```

### Static File Serving
```go
// Serve static files
app.Static("/", "./public")

// Serve with prefix
app.Static("/static", "./public/assets")
```

## Performance Tips
1. Use Fiber's built-in optimizations
2. Implement proper connection pooling
3. Use appropriate data structures
4. Monitor memory usage
5. Use caching where appropriate
6. Leverage zero allocation features

## Security Best Practices
1. Always validate input
2. Use HTTPS in production
3. Implement proper CORS policies
4. Use secure cookie settings
5. Sanitize user inputs
6. Implement rate limiting

## Testing Patterns
```go
// Test handler
func TestPingHandler(t *testing.T) {
    app := fiber.New()
    handler := &httpHandler{}
    
    app.Get("/ping", handler.ping)
    
    req := httptest.NewRequest("GET", "/ping", nil)
    resp, _ := app.Test(req)
    
    assert.Equal(t, 200, resp.StatusCode)
}
```

