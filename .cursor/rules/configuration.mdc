---
description: 
globs: 
alwaysApply: false
---
# Configuration Management Rules

## Environment-Based Configuration
This project uses environment-based configuration to separate development, staging, and production settings.

## Configuration Structure
- `lib/config/` - All configuration-related code
- Use environment variables for sensitive data
- Implement configuration validation
- Provide secure defaults

## Cookie Configuration Pattern
Based on the [Fiber documentation](mdc:https:/docs.gofiber.io), implement environment-specific cookie settings:

### Development Environment
```go
// lib/config/cookie.go
func getDevelopmentCookieConfig() *CookieConfig {
    return &CookieConfig{
        Name:     "my_cookie",
        Value:    "cookie_value",
        Path:     "/",
        MaxAge:   int(time.Hour.Seconds()), // 1 hour
        Secure:   false,                    // false for HTTP
        HTTPOnly: true,
        SameSite: fiber.CookieSameSiteLaxMode,
    }
}
```

### Production Environment
```go
func getProductionCookieConfig() *CookieConfig {
    return &CookieConfig{
        Name:     "my_cookie",
        Value:    "cookie_value",
        Path:     "/",
        MaxAge:   int(24 * time.Hour.Seconds()), // 24 hours
        Secure:   true,                          // true for HTTPS
        HTTPOnly: true,
        SameSite: fiber.CookieSameSiteStrictMode,
    }
}
```

## Environment Variables
- `APP_ENV` - Set to "production" for production settings
- `PORT` - Server port (default: 3000)
- `DATABASE_URL` - Database connection string
- `JWT_SECRET` - JWT signing secret
- `CORS_ORIGIN` - Allowed CORS origins

## Configuration Best Practices
1. Never hardcode sensitive values
2. Use environment variables for all configurable values
3. Implement configuration validation on startup
4. Provide meaningful default values
5. Document all configuration options
6. Use type-safe configuration structs

## Usage in Handlers
```go
// internal/app/http_handler.go
func (h *httpHandler) setCookie(c *fiber.Ctx) error {
    cookieConfig := config.GetCookieConfig()
    myCookie := cookieConfig.ToFiberCookie()
    c.Cookie(&myCookie)
    return c.SendString("Cookie set!")
}
```

## Configuration Validation
Always validate configuration on application startup:
```go
func validateConfig() error {
    if os.Getenv("JWT_SECRET") == "" {
        return errors.New("JWT_SECRET environment variable is required")
    }
    return nil
}
```

